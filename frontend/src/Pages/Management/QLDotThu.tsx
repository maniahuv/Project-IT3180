import React, { useState, useEffect, FormEvent } from "react";
import MainLayout from '../../Layout/MainLayout';
import { FaSearch, FaPlus, FaPen, FaTrashAlt, FaSave, FaTimes } from "react-icons/fa";
import { fetchAllDotThu, createDotThu, updateDotThu, deleteDotThu, DotThu } from '../../api/DotThuApi';

const QLDotThu: React.FC = () => {
  const [searchCriteria, setSearchCriteria] = useState("tenDotThu");
  const [searchInput, setSearchInput] = useState("");
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [isAdding, setIsAdding] = useState(false);
  const [editingId, setEditingId] = useState<number | null>(null);
  const [dotThuList, setDotThuList] = useState<DotThu[]>([]);
  const [newDotThu, setNewDotThu] = useState<DotThu>({
    maDotThu: 0,
    tenDotThu: "",
    ngayBatDau: "",
    ngayKetThuc: "",
    trangThai: "Chưa hoàn thành",
    khoanThus: [],
  });
  const [editingData, setEditingData] = useState<DotThu | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch all DotThu on component mount
  useEffect(() => {
    const loadDotThu = async () => {
      setLoading(true);
      try {
        const response = await fetchAllDotThu();
        setDotThuList(response.data);
      } catch (err) {
        setError("Lỗi khi tải danh sách đợt thu");
      } finally {
        setLoading(false);
      }
    };
    loadDotThu();
  }, []);

  const handleSearch = async (e: FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await fetchAllDotThu();
      const filtered = response.data.filter((item) => {
        const value = item[searchCriteria as keyof DotThu]?.toString().toLowerCase() || "";
        return value.includes(searchInput.toLowerCase());
      });
      setDotThuList(filtered);
    } catch (err) {
      setError("Lỗi khi tìm kiếm đợt thu");
    } finally {
      setLoading(false);
    }
  };

  const handleAddNew = () => {
    if (isAdding) return;

    // Calculate the next maDotThu as the highest existing maDotThu + 1
    const nextMaDotThu =
      dotThuList.length > 0
        ? Math.max(...dotThuList.map(item => item.maDotThu)) + 1
        : 1;

    setIsAdding(true);
    setNewDotThu({
      maDotThu: nextMaDotThu,
      tenDotThu: "",
      ngayBatDau: "",
      ngayKetThuc: "",
      trangThai: "Chưa hoàn thành",
      khoanThus: [],
    });
  };

  const handleSaveNew = async () => {
    if (!newDotThu.tenDotThu.trim()) {
      alert("Vui lòng nhập Tên đợt thu.");
      return;
    }

    if (newDotThu.ngayBatDau && newDotThu.ngayKetThuc && newDotThu.ngayBatDau > newDotThu.ngayKetThuc) {
      alert("Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc.");
      return;
    }

    setLoading(true);
    try {
      setError(null);
      // Send the newDotThu without maDotThu, as it will be generated by the backend
      const response = await createDotThu({
        ...newDotThu,
        maDotThu: 0, // Set to 0 to let backend generate the ID
      });
      setDotThuList([...dotThuList, response.data]);
      setIsAdding(false);
      setNewDotThu({
        maDotThu: 0,
        tenDotThu: "",
        ngayBatDau: "",
        ngayKetThuc: "",
        trangThai: "Chưa hoàn thành",
        khoanThus: [],
      });
    } catch (err) {
      setError("Lỗi khi tạo đợt thu");
    } finally {
      setLoading(false);
    }
  };

  const handleCancelAdd = () => {
    setIsAdding(false);
    setNewDotThu({
      maDotThu: 0,
      tenDotThu: "",
      ngayBatDau: "",
      ngayKetThuc: "",
      trangThai: "Chưa hoàn thành",
      khoanThus: [],
    });
  };

  const handleEdit = async (item: DotThu) => {
    if (editingId === item.maDotThu) {
      // Save changes
      if (editingData) {
        if (!editingData.tenDotThu.trim()) {
          alert("Vui lòng nhập Tên đợt thu.");
          return;
        }

        if (editingData.ngayBatDau && editingData.ngayKetThuc && editingData.ngayBatDau > editingData.ngayKetThuc) {
          alert("Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc.");
          return;
        }

        setLoading(true);
        try {
          const response = await updateDotThu(editingData.maDotThu, editingData);
          setDotThuList(dotThuList.map(dt => dt.maDotThu === editingData.maDotThu ? response.data : dt));
          setEditingId(null);
          setEditingData(null);
        } catch (err) {
          setError("Lỗi khi cập nhật đợt thu");
        } finally {
          setLoading(false);
        }
      }
    } else {
      // Start editing
      setEditingId(item.maDotThu);
      setEditingData({ ...item });
    }
  };

  const handleDelete = async (id: number) => {
    if (window.confirm("Bạn có chắc muốn xóa đợt thu này?")) {
      setLoading(true);
      try {
        await deleteDotThu(id);
        setDotThuList(dotThuList.filter(item => item.maDotThu !== id));
      } catch (err) {
        setError("Lỗi khi xóa đợt thu");
      } finally {
        setLoading(false);
      }
    }
  };

  const updateEditingData = (field: keyof DotThu, value: string) => {
    if (editingData) {
      setEditingData({
        ...editingData,
        [field]: value,
      });
    }
  };

  return (
    <MainLayout>
      <div className="bg-white rounded-lg shadow-sm">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">Quản lý đợt thu</h2>
        </div>

        <div className="p-6">
          {error && <div className="mb-4 text-red-600">{error}</div>}
          {loading && <div className="mb-4 text-blue-600">Đang tải...</div>}

          {/* Search and Actions */}
          <form onSubmit={handleSearch} className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="flex flex-1 gap-2">
              <select
                value={searchCriteria}
                onChange={(e) => setSearchCriteria(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="tenDotThu">Tên đợt thu</option>
                <option value="ngayBatDau">Ngày bắt đầu</option>
                <option value="ngayKetThuc">Ngày kết thúc</option>
                <option value="trangThai">Trạng thái</option>
              </select>
              <input
                type="text"
                value={searchInput}
                onChange={(e) => setSearchInput(e.target.value)}
                placeholder="Nhập từ khóa tìm kiếm"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
              >
                <FaSearch />
                Tìm kiếm
              </button>
            </div>
            <button
              onClick={handleAddNew}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
            >
              <FaPlus />
              Tạo mới
            </button>
          </form>

          {/* Data Table */}
          <div className="overflow-x-auto">
            <table className="w-full border border-gray-200 rounded-lg">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Mã đợt thu</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Tên đợt thu</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Ngày bắt đầu</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Ngày kết thúc</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Trạng thái</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-900 border-b">Hành động</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {/* Existing data rows */}
                {dotThuList.map((item) => (
                  <tr key={item.maDotThu} className="hover:bg-gray-50">
                    <td className="px-4 py-3 text-sm text-gray-900">{item.maDotThu}</td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {editingId === item.maDotThu ? (
                        <input
                          type="text"
                          value={editingData?.tenDotThu || ""}
                          onChange={(e) => updateEditingData("tenDotThu", e.target.value)}
                          className="w-full px-2 py-1 border border-gray-300 rounded"
                        />
                      ) : (
                        item.tenDotThu
                      )}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {editingId === item.maDotThu ? (
                        <input
                          type="date"
                          value={editingData?.ngayBatDau || ""}
                          onChange={(e) => updateEditingData("ngayBatDau", e.target.value)}
                          className="w-full px-2 py-1 border border-gray-300 rounded"
                        />
                      ) : (
                        item.ngayBatDau || "-"
                      )}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {editingId === item.maDotThu ? (
                        <input
                          type="date"
                          value={editingData?.ngayKetThuc || ""}
                          onChange={(e) => updateEditingData("ngayKetThuc", e.target.value)}
                          className="w-full px-2 py-1 border border-gray-300 rounded"
                        />
                      ) : (
                        item.ngayKetThuc || "-"
                      )}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {editingId === item.maDotThu ? (
                        <select
                          value={editingData?.trangThai || "Chưa hoàn thành"}
                          onChange={(e) => updateEditingData("trangThai", e.target.value)}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                        >
                          <option value="Đã hoàn thành">Đã hoàn thành</option>
                          <option value="Chưa hoàn thành">Chưa hoàn thành</option>
                        </select>
                      ) : (
                        <span
                          className={`px-2 py-1 rounded-full text-xs ${
                            item.trangThai === "Đã hoàn thành"
                              ? "bg-green-100 text-green-800"
                              : "bg-red-100 text-red-800"
                          }`}
                        >
                          {item.trangThai || "-"}
                        </span>
                      )}
                    </td>
                    <td className="px-4 py-3 text-sm">
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleEdit(item)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded transition-colors"
                          title={editingId === item.maDotThu ? "Lưu" : "Sửa"}
                        >
                          {editingId === item.maDotThu ? <FaSave /> : <FaPen />}
                        </button>
                        <button
                          onClick={() => handleDelete(item.maDotThu)}
                          className="p-2 text-red-600 hover:bg-red-50 rounded transition-colors"
                          title="Xóa"
                        >
                          <FaTrashAlt />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}

                {/* Add new row */}
                {isAdding && (
                  <tr className="bg-blue-50">
                    <td className="px-4 py-3 text-sm text-gray-900">{newDotThu.maDotThu}</td>
                    <td className="px-4 py-3">
                      <input
                        type="text"
                        value={newDotThu.tenDotThu}
                        onChange={(e) => setNewDotThu({ ...newDotThu, tenDotThu: e.target.value })}
                        placeholder="Tên đợt thu"
                        className="w-full px-2 py-1 border border-gray-300 rounded"
                      />
                    </td>
                    <td className="px-4 py-3">
                      <input
                        type="date"
                        value={newDotThu.ngayBatDau}
                        onChange={(e) => setNewDotThu({ ...newDotThu, ngayBatDau: e.target.value })}
                        className="w-full px-2 py-1 border border-gray-300 rounded"
                      />
                    </td>
                    <td className="px-4 py-3">
                      <input
                        type="date"
                        value={newDotThu.ngayKetThuc}
                        onChange={(e) => setNewDotThu({ ...newDotThu, ngayKetThuc: e.target.value })}
                        className="w-full px-2 py-1 border border-gray-300 rounded"
                      />
                    </td>
                    <td className="px-4 py-3">
                      <select
                        value={newDotThu.trangThai}
                        onChange={(e) =>
                          setNewDotThu({ ...newDotThu, trangThai: e.target.value })
                        }
                        className="w-full px-2 py-1 border border-gray-300 rounded text-sm"
                      >
                        <option value="Đã hoàn thành">Đã hoàn thành</option>
                        <option value="Chưa hoàn thành">Chưa hoàn thành</option>
                      </select>
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex gap-2">
                        <button
                          onClick={handleSaveNew}
                          className="p-2 text-green-600 hover:bg-green-50 rounded transition-colors"
                          title="Lưu"
                        >
                          <FaSave />
                        </button>
                        <button
                          onClick={handleCancelAdd}
                          className="p-2 text-red-600 hover:bg-red-50 rounded transition-colors"
                          title="Hủy"
                        >
                          <FaTimes />
                        </button>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          <div className="mt-4 flex justify-between items-center">
            <div className="flex items-center gap-2">
              <label className="text-sm text-gray-700">
                Hiển thị
                <select
                  value={itemsPerPage}
                  onChange={(e) => setItemsPerPage(Number(e.target.value))}
                  className="mx-2 px-2 py-1 border border-gray-300 rounded"
                >
                  <option value={10}>10</option>
                  <option value={25}>25</option>
                  <option value={50}>50</option>
                </select>
                mục
              </label>
            </div>
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default QLDotThu;